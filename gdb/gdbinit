python
import gdb

class Try(gdb.Command):
    """Try a gdb command and catch exceptions."""

    def __init__(self):
        super(Try, self).__init__("try", gdb.COMMAND_USER)

    def invoke(self, arg, from_tty):
        try:
            gdb.execute(arg, False, True)
        except:
            pass

Try()
end

# Source helper files
#try source ~/.gdb/aliases.gdb
#try source ~/.gdb/breakpoints.gdb
#try source ~/.gdb/context.gdb
#try source ~/.gdb/env.gdb
#try source ~/.gdb/hexdump.gdb
#try source ~/.gdb/prompt.gdb
#try source ~/.gdb/registers.gdb
#try source ~/.gdb/stack.gdb

# Init parameters
# set disassembly-flavor intel
set history filename ~/.gdb/history
set history size 2048
set history save on
set radix 0x10
set pagination off
set print array on
set print pretty on

# Don't confirm quit
define hook-quit
    set confirm off
end

# Local file
try source ~/.gdb/local.gdb

# Python Exploit Development Assistance (PEDA) for gdb
try source ~/.gdb/peda/peda.py
try peda set option autosave off

# GDB Enhancement Framwork (GEF)
try source ~/.gdb/gef/gef.py

# pwndbg
try source ~/.gdb/pwndbg/gdbinit.py
